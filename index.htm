<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Admin - Sistema Financeiro SaaS</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        .chart-container {
            height: 300px;
            width: 100%;
        }
        .admin-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .metric-card {
            transition: transform 0.2s;
        }
        .metric-card:hover {
            transform: translateY(-2px);
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <!-- Header Admin -->
    <header class="admin-card text-white shadow-lg">
        <div class="container mx-auto px-4 py-6">
            <div class="flex items-center justify-between">
                <h1 class="text-2xl font-bold">
                    <i class="fas fa-cog mr-2"></i>
                    Dashboard Administrativo
                </h1>
                <div class="text-sm">
                    <span id="dataHoraAtual"></span>
                </div>
            </div>
        </div>
    </header>

    <!-- Métricas Principais -->
    <div class="container mx-auto px-4 py-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white p-6 rounded-lg shadow-lg metric-card">
                <div class="flex items-center">
                    <div class="bg-blue-100 p-3 rounded-full">
                        <i class="fas fa-users text-blue-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-gray-600 text-sm">Total Usuários</p>
                        <p class="text-2xl font-bold text-gray-800" id="totalUsuarios">0</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-white p-6 rounded-lg shadow-lg metric-card">
                <div class="flex items-center">
                    <div class="bg-green-100 p-3 rounded-full">
                        <i class="fas fa-crown text-yellow-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-gray-600 text-sm">Usuários Premium</p>
                        <p class="text-2xl font-bold text-gray-800" id="usuariosPremium">0</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-white p-6 rounded-lg shadow-lg metric-card">
                <div class="flex items-center">
                    <div class="bg-green-100 p-3 rounded-full">
                        <i class="fas fa-dollar-sign text-green-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-gray-600 text-sm">Receita Mensal</p>
                        <p class="text-2xl font-bold text-gray-800" id="receitaMensal">R$ 0,00</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-white p-6 rounded-lg shadow-lg metric-card">
                <div class="flex items-center">
                    <div class="bg-red-100 p-3 rounded-full">
                        <i class="fas fa-ban text-red-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-gray-600 text-sm">Bloqueados</p>
                        <p class="text-2xl font-bold text-gray-800" id="usuariosBloqueados">0</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Configurações Sistema -->
        <div class="bg-white rounded-lg shadow-lg mb-8">
            <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <h2 class="text-xl font-bold text-gray-800">
                    <i class="fas fa-cogs mr-2"></i>
                    Configurações do Sistema
                </h2>
            </div>
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Preço Premium (R$)</label>
                        <div class="flex">
                            <input type="number" id="precoPremium" step="0.01" value="4.99" 
                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <button onclick="alterarPreco()" class="bg-blue-600 text-white px-4 py-2 rounded-r-md hover:bg-blue-700">
                                Salvar
                            </button>
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Status Sistema</label>
                        <div class="flex items-center">
                            <span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">
                                <i class="fas fa-check-circle mr-1"></i>
                                Online
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Gestão de Usuários -->
        <div class="bg-white rounded-lg shadow-lg mb-8">
            <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
                <div class="flex justify-between items-center">
                    <h2 class="text-xl font-bold text-gray-800">
                        <i class="fas fa-users mr-2"></i>
                        Gestão de Usuários
                    </h2>
                    <button onclick="atualizarUsuarios()" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                        <i class="fas fa-sync mr-1"></i>
                        Atualizar
                    </button>
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Usuário</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Plano</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Data Cadastro</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Ações</th>
                        </tr>
                    </thead>
                    <tbody id="tabelaUsuarios" class="divide-y divide-gray-200">
                        <tr>
                            <td colspan="5" class="px-6 py-8 text-center text-gray-500">
                                <i class="fas fa-users text-3xl mb-2"></i><br>
                                Carregando usuários...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Gráficos -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h3 class="text-lg font-bold text-gray-800 mb-4">
                    <i class="fas fa-chart-line mr-2"></i>
                    Crescimento de Usuários
                </h3>
                <div class="chart-container">
                    <canvas id="graficoUsuarios"></canvas>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h3 class="text-lg font-bold text-gray-800 mb-4">
                    <i class="fas fa-chart-pie mr-2"></i>
                    Distribuição de Planos
                </h3>
                <div class="chart-container">
                    <canvas id="graficoPlanos"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Confirmação Bloqueio -->
    <div id="modalBloqueio" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
                    <i class="fas fa-ban text-red-600"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">Bloquear Usuário</h3>
                <p class="text-sm text-gray-500 mb-4" id="mensagemBloqueio"></p>
                <div class="flex justify-center space-x-4">
                    <button onclick="confirmarBloqueio()" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
                        Sim, Bloquear
                    </button>
                    <button onclick="cancelarBloqueio()" class="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Confirmação Exclusão -->
    <div id="modalExclusao" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
                    <i class="fas fa-trash text-red-600"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">⚠️ ATENÇÃO!</h3>
                <p class="text-sm text-gray-500 mb-4" id="mensagemExclusao"></p>
                <div class="bg-red-50 p-3 rounded mb-4 text-left">
                    <p class="text-xs text-red-600">Esta ação irá:</p>
                    <ul class="text-xs text-red-600 list-disc list-inside">
                        <li>Remover TODOS os dados do usuário</li>
                        <li>NÃO pode ser desfeita</li>
                        <li>Bloquear acesso permanentemente</li>
                    </ul>
                </div>
                <div class="flex justify-center space-x-4">
                    <button onclick="confirmarExclusao()" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
                        Sim, Excluir
                    </button>
                    <button onclick="cancelarExclusao()" class="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Variáveis globais
        let usuarioParaBloquear = null;
        let usuarioParaExcluir = null;
        let supabase = null;
        let usingSupabase = false;

        // Configuração Supabase
        const SUPABASE_URL = 'https://ghebbonghxbfkzlzpfez.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdoZWJib25naHhiZmt6bHpwZmV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYxODM2NDgsImV4cCI6MjA3MTc1OTY0OH0.Y1EPGyIlmkG1XPVOqT6qqS9pW2vOnArCh0ahpBg72_g';

        // Inicializar Supabase
        function initSupabase() {
            try {
                if (typeof window.supabase !== 'undefined') {
                    supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
                    usingSupabase = true;
                    console.log('✅ Supabase conectado:', SUPABASE_URL);
                    testSupabaseConnection();
                    return true;
                } else {
                    throw new Error('Biblioteca Supabase não carregou');
                }
            } catch (error) {
                console.log('❌ Erro conectando Supabase:', error.message);
                usingSupabase = false;
                console.log('🔄 Usando localStorage como fallback');
                return false;
            }
        }

        // Testar conexão Supabase
        async function testSupabaseConnection() {
            try {
                const { data, error } = await supabase.from('users').select('id').limit(1);
                if (error) throw error;
                console.log('✅ Supabase funcionando corretamente');
            } catch (error) {
                console.log('⚠️ Teste Supabase falhou:', error.message);
                usingSupabase = false;
            }
        }

        // Carregar usuários do Supabase
        async function carregarUsuariosSupabase() {
            try {
                const { data: users, error: usersError } = await supabase
                    .from('users')
                    .select('*');
                
                if (usersError) throw usersError;

                const { data: blockedUsers, error: blockedError } = await supabase
                    .from('user_blocks')
                    .select('email');
                
                if (blockedError) throw blockedError;

                return {
                    users: users || [],
                    blocked: (blockedUsers || []).map(b => b.email)
                };
            } catch (error) {
                console.log('⚠️ Erro Supabase users:', error);
                console.log('🔄 Usando localStorage como fallback');
                return null;
            }
        }

        // Carregar configurações do Supabase
        async function carregarConfigSupabase() {
            try {
                const { data, error } = await supabase
                    .from('admin_data')
                    .select('value')
                    .eq('key', 'config')
                    .single();
                
                if (error) throw error;
                return JSON.parse(data.value);
            } catch (error) {
                console.log('⚠️ Erro Supabase admin_data:', error);
                return { precoPremium: 4.99 };
            }
        }

        // Bloquear usuário no Supabase
        async function bloquearUsuarioSupabase(email, nome) {
            try {
                const { error } = await supabase
                    .from('user_blocks')
                    .insert([{ email: email, motivo: `Bloqueado pelo admin` }]);
                
                if (error) throw error;
                return true;
            } catch (error) {
                console.log('⚠️ Erro bloqueando usuário:', error);
                return false;
            }
        }

        // Desbloquear usuário no Supabase
        async function desbloquearUsuarioSupabase(email) {
            try {
                const { error } = await supabase
                    .from('user_blocks')
                    .delete()
                    .eq('email', email);
                
                if (error) throw error;
                return true;
            } catch (error) {
                console.log('⚠️ Erro desbloqueando usuário:', error);
                return false;
            }
        }

        // Excluir usuário no Supabase
        async function excluirUsuarioSupabase(email) {
            try {
                // Remover bloqueios
                await supabase.from('user_blocks').delete().eq('email', email);
                
                // Remover transações
                await supabase.from('transactions').delete().eq('user_email', email);
                
                // Remover usuário
                const { error } = await supabase.from('users').delete().eq('email', email);
                
                if (error) throw error;
                return true;
            } catch (error) {
                console.log('⚠️ Erro excluindo usuário:', error);
                return false;
            }
        }

        // Salvar preço no Supabase
        async function salvarPrecoSupabase(novoPreco) {
            try {
                const { error } = await supabase
                    .from('admin_data')
                    .update({ value: JSON.stringify({ precoPremium: novoPreco }) })
                    .eq('key', 'config');
                
                if (error) throw error;
                return true;
            } catch (error) {
                console.log('⚠️ Erro salvando preço:', error);
                return false;
            }
        }

        // Inicialização
        document.addEventListener('DOMContentLoaded', function() {
            initSupabase();
            atualizarDataHora();
            setInterval(atualizarDataHora, 60000);
            carregarDados();
            criarGraficos();
        });

        function atualizarDataHora() {
            const agora = new Date();
            document.getElementById('dataHoraAtual').textContent = 
                agora.toLocaleDateString('pt-BR') + ' ' + agora.toLocaleTimeString('pt-BR');
        }

        async function carregarDados() {
            await atualizarUsuarios();
            await atualizarMetricas();
        }

        async function atualizarUsuarios() {
            const tbody = document.getElementById('tabelaUsuarios');
            let usuarios = [];
            let bloqueados = [];
            
            if (usingSupabase) {
                const data = await carregarUsuariosSupabase();
                if (data) {
                    usuarios = data.users;
                    bloqueados = data.blocked;
                } else {
                    // Fallback para localStorage
                    usuarios = JSON.parse(localStorage.getItem('usuarios') || '[]');
                    bloqueados = JSON.parse(localStorage.getItem('usuariosBloqueados') || '[]');
                }
            } else {
                usuarios = JSON.parse(localStorage.getItem('usuarios') || '[]');
                bloqueados = JSON.parse(localStorage.getItem('usuariosBloqueados') || '[]');
            }
            
            if (usuarios.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" class="px-6 py-8 text-center text-gray-500">
                            <i class="fas fa-users text-3xl mb-2"></i><br>
                            Nenhum usuário cadastrado ainda
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = '';
            usuarios.forEach(usuario => {
                const isBloqueado = bloqueados.includes(usuario.email);
                const statusClass = isBloqueado ? 'bg-red-100 text-red-800' : 
                                  usuario.ativo ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800';
                const statusText = isBloqueado ? 'Bloqueado' : 
                                  usuario.ativo ? 'Ativo' : 'Inativo';
                
                const tr = document.createElement('tr');
                tr.className = 'hover:bg-gray-50';
                tr.innerHTML = `
                    <td class="px-6 py-4">
                        <div>
                            <div class="text-sm font-medium text-gray-900">${usuario.nome}</div>
                            <div class="text-sm text-gray-500">${usuario.email}</div>
                        </div>
                    </td>
                    <td class="px-6 py-4">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            usuario.plano === 'premium' ? 'bg-yellow-100 text-yellow-800' : 'bg-gray-100 text-gray-800'
                        }">
                            ${usuario.plano === 'premium' ? 'Premium' : 'Gratuito'}
                        </span>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-500">
                        ${usuario.data_criacao ? new Date(usuario.data_criacao).toLocaleDateString('pt-BR') : 'N/A'}
                    </td>
                    <td class="px-6 py-4">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}">
                            ${statusText}
                        </span>
                    </td>
                    <td class="px-6 py-4 text-sm font-medium space-x-2">
                        ${!isBloqueado ? `
                            <button onclick="bloquearUsuario('${usuario.email}', '${usuario.nome}')" 
                                    class="text-red-600 hover:text-red-900" title="Bloquear">
                                <i class="fas fa-ban"></i>
                            </button>
                        ` : `
                            <button onclick="desbloquearUsuario('${usuario.email}')" 
                                    class="text-green-600 hover:text-green-900" title="Desbloquear">
                                <i class="fas fa-unlock"></i>
                            </button>
                        `}
                        <button onclick="excluirUsuario('${usuario.email}', '${usuario.nome}')" 
                                class="text-red-600 hover:text-red-900 ml-2" title="Excluir">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        }

        async function atualizarMetricas() {
            let usuarios = [];
            let bloqueados = [];
            let precoPremium = 4.99;
            
            if (usingSupabase) {
                const data = await carregarUsuariosSupabase();
                if (data) {
                    usuarios = data.users;
                    bloqueados = data.blocked;
                }
                
                const config = await carregarConfigSupabase();
                precoPremium = config.precoPremium || 4.99;
            } else {
                usuarios = JSON.parse(localStorage.getItem('usuarios') || '[]');
                bloqueados = JSON.parse(localStorage.getItem('usuariosBloqueados') || '[]');
                
                const config = JSON.parse(localStorage.getItem('configAdmin') || '{}');
                precoPremium = config.precoPremium || 4.99;
            }

            const totalUsuarios = usuarios.length;
            const usuariosPremium = usuarios.filter(u => u.plano === 'premium').length;
            const usuariosBloqueados = bloqueados.length;
            const receitaMensal = usuariosPremium * precoPremium;

            document.getElementById('totalUsuarios').textContent = totalUsuarios;
            document.getElementById('usuariosPremium').textContent = usuariosPremium;
            document.getElementById('usuariosBloqueados').textContent = usuariosBloqueados;
            document.getElementById('receitaMensal').textContent = `R$ ${receitaMensal.toFixed(2).replace('.', ',')}`;
            document.getElementById('precoPremium').value = precoPremium;
        }

        function bloquearUsuario(email, nome) {
            usuarioParaBloquear = { email, nome };
            document.getElementById('mensagemBloqueio').textContent = `Bloquear o usuário "${nome}" (${email})?`;
            document.getElementById('modalBloqueio').classList.remove('hidden');
        }

        async function confirmarBloqueio() {
            if (usuarioParaBloquear) {
                let sucesso = false;
                
                if (usingSupabase) {
                    sucesso = await bloquearUsuarioSupabase(usuarioParaBloquear.email, usuarioParaBloquear.nome);
                } else {
                    // Fallback localStorage
                    let bloqueados = JSON.parse(localStorage.getItem('usuariosBloqueados') || '[]');
                    if (!bloqueados.includes(usuarioParaBloquear.email)) {
                        bloqueados.push(usuarioParaBloquear.email);
                        localStorage.setItem('usuariosBloqueados', JSON.stringify(bloqueados));
                        sucesso = true;
                    }
                }
                
                if (sucesso) {
                    await atualizarUsuarios();
                    await atualizarMetricas();
                }
            }
            cancelarBloqueio();
        }

        function cancelarBloqueio() {
            usuarioParaBloquear = null;
            document.getElementById('modalBloqueio').classList.add('hidden');
        }

        async function desbloquearUsuario(email) {
            let sucesso = false;
            
            if (usingSupabase) {
                sucesso = await desbloquearUsuarioSupabase(email);
            } else {
                // Fallback localStorage
                let bloqueados = JSON.parse(localStorage.getItem('usuariosBloqueados') || '[]');
                bloqueados = bloqueados.filter(b => b !== email);
                localStorage.setItem('usuariosBloqueados', JSON.stringify(bloqueados));
                sucesso = true;
            }
            
            if (sucesso) {
                await atualizarUsuarios();
                await atualizarMetricas();
            }
        }

        function excluirUsuario(email, nome) {
            usuarioParaExcluir = { email, nome };
            document.getElementById('mensagemExclusao').textContent = `Excluir permanentemente o usuário "${nome}" (${email})?`;
            document.getElementById('modalExclusao').classList.remove('hidden');
        }

        async function confirmarExclusao() {
            if (usuarioParaExcluir) {
                let sucesso = false;
                const email = usuarioParaExcluir.email;
                
                if (usingSupabase) {
                    sucesso = await excluirUsuarioSupabase(email);
                } else {
                    // Fallback localStorage
                    let usuarios = JSON.parse(localStorage.getItem('usuarios') || '[]');
                    usuarios = usuarios.filter(u => u.email !== email);
                    localStorage.setItem('usuarios', JSON.stringify(usuarios));
                    
                    let bloqueados = JSON.parse(localStorage.getItem('usuariosBloqueados') || '[]');
                    bloqueados = bloqueados.filter(b => b !== email);
                    localStorage.setItem('usuariosBloqueados', JSON.stringify(bloqueados));
                    
                    localStorage.removeItem(`dadosFinanceiros_${email}`);
                    sucesso = true;
                }
                
                if (sucesso) {
                    await atualizarUsuarios();
                    await atualizarMetricas();
                }
            }
            cancelarExclusao();
        }

        function cancelarExclusao() {
            usuarioParaExcluir = null;
            document.getElementById('modalExclusao').classList.add('hidden');
        }

        async function alterarPreco() {
            const novoPreco = parseFloat(document.getElementById('precoPremium').value);
            if (novoPreco && novoPreco > 0) {
                let sucesso = false;
                
                if (usingSupabase) {
                    sucesso = await salvarPrecoSupabase(novoPreco);
                } else {
                    // Fallback localStorage
                    let config = JSON.parse(localStorage.getItem('configAdmin') || '{}');
                    config.precoPremium = novoPreco;
                    localStorage.setItem('configAdmin', JSON.stringify(config));
                    sucesso = true;
                }
                
                if (sucesso) {
                    await atualizarMetricas();
                    
                    // Feedback visual
                    const btn = event.target;
                    const originalText = btn.textContent;
                    btn.textContent = 'Salvo!';
                    btn.className = 'bg-green-600 text-white px-4 py-2 rounded-r-md';
                    setTimeout(() => {
                        btn.textContent = originalText;
                        btn.className = 'bg-blue-600 text-white px-4 py-2 rounded-r-md hover:bg-blue-700';
                    }, 2000);
                }
            }
        }

        function criarGraficos() {
            // Gráfico de Usuários
            const ctxUsuarios = document.getElementById('graficoUsuarios').getContext('2d');
            new Chart(ctxUsuarios, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun'],
                    datasets: [{
                        label: 'Usuários',
                        data: [12, 19, 25, 32, 45, 52],
                        borderColor: 'rgb(59, 130, 246)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Gráfico de Planos
            const ctxPlanos = document.getElementById('graficoPlanos').getContext('2d');
            new Chart(ctxPlanos, {
                type: 'doughnut',
                data: {
                    labels: ['Gratuito', 'Premium'],
                    datasets: [{
                        data: [75, 25],
                        backgroundColor: ['#E5E7EB', '#F59E0B']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        }

        // Atualizar dados periodicamente
        setInterval(async () => {
            await atualizarUsuarios();
            await atualizarMetricas();
        }, 10000);
    </script>
</body>
</html>
    <script id="html_badge_script1">
        window.__genspark_remove_badge_link = "https://www.genspark.ai/api/html_badge/" +
            "remove_badge?token=To%2FBnjzloZ3UfQdcSaYfDkn51c0lhoU43QVsnh5MODunJs2urKIIVT9blChvgNxJ3XmL%2B4asTujLZ3r%2Bjx7kh8Un6woQjq6jCiujh873qW6dxPz7KL3%2Fp4xkvtsnw8vQuG2yd1SXarf7Ja23yw8DrC6xEAeffT7pwRd8wkt63JrqwiLY9VO0CRqLZa4vJpsgnMlQXSVNnYzAYH2YuHtlTpDai2eYwmdUSVwEAYyDqmFCJcm6yXJki4DGszdzti0N0JUtH8OIlpqsxSrA351P43bID8dhxYxVpE0sWqoBQUKlHsVTQo8iiAy2Q1XOhwhB3BoFPmfRPqPNyPsIy7oXD%2B4%2BEHyTJ8ncbLk7uqIgiEqez8dajeey6NoYkuM2xxb0TNajgro8kUEoWyhYJU9t8QPFwq52H1G7qtNKRp%2FJOR63iEGr1Kac0BbMFoeLo%2FLtrM7Iu%2B91NkmlFM2Q6rA1mcDpNPTFbxjj3cASM5zwVldLCB%2Fuy4VC6i%2FJmVZrgb82Nz%2FNpGvxKOjfLamu3qv47KrEz0ufnWYyH4AuYEGR9hI%3D";
        window.__genspark_locale = "pt-BR";
        window.__genspark_token = "To/BnjzloZ3UfQdcSaYfDkn51c0lhoU43QVsnh5MODunJs2urKIIVT9blChvgNxJ3XmL+4asTujLZ3r+jx7kh8Un6woQjq6jCiujh873qW6dxPz7KL3/p4xkvtsnw8vQuG2yd1SXarf7Ja23yw8DrC6xEAeffT7pwRd8wkt63JrqwiLY9VO0CRqLZa4vJpsgnMlQXSVNnYzAYH2YuHtlTpDai2eYwmdUSVwEAYyDqmFCJcm6yXJki4DGszdzti0N0JUtH8OIlpqsxSrA351P43bID8dhxYxVpE0sWqoBQUKlHsVTQo8iiAy2Q1XOhwhB3BoFPmfRPqPNyPsIy7oXD+4+EHyTJ8ncbLk7uqIgiEqez8dajeey6NoYkuM2xxb0TNajgro8kUEoWyhYJU9t8QPFwq52H1G7qtNKRp/JOR63iEGr1Kac0BbMFoeLo/LtrM7Iu+91NkmlFM2Q6rA1mcDpNPTFbxjj3cASM5zwVldLCB/uy4VC6i/JmVZrgb82Nz/NpGvxKOjfLamu3qv47KrEz0ufnWYyH4AuYEGR9hI=";
    </script>
    
    <script id="html_notice_dialog_script" src="https://www.genspark.ai/notice_dialog.js"></script>
    